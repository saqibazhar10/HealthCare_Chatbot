# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np
import pandas as pd
from win3 import Ui_MainWindow_3
from win4 import Ui_MainWindow_4
from win32com.client import Dispatch
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn



class Ui_MainWindow_2(object):
    from sklearn import tree
    global clf3
    global clf4,gnb
    clf3 = tree.DecisionTreeClassifier()   
    from sklearn.ensemble import RandomForestClassifier
    clf4 = RandomForestClassifier() 
    from sklearn.naive_bayes import GaussianNB
    gnb = GaussianNB()
    global l1
    global dis
    dis=[]
    l=['back_pain','constipation','abdominal_pain','diarrhoea','mild_fever','yellow_urine',
    'yellowing_of_eyes','acute_liver_failure','fluid_overload','swelling_of_stomach',
    'swelled_lymph_nodes','malaise','blurred_and_distorted_vision','phlegm','throat_irritation',
    'redness_of_eyes','sinus_pressure','runny_nose','congestion','chest_pain','weakness_in_limbs',
    'fast_heart_rate','pain_during_bowel_movements','pain_in_anal_region','bloody_stool',
    'irritation_in_anus','neck_pain','dizziness','cramps','bruising','obesity','swollen_legs',
    'swollen_blood_vessels','puffy_face_and_eyes','enlarged_thyroid','brittle_nails',
    'swollen_extremeties','excessive_hunger','extra_marital_contacts','drying_and_tingling_lips',
    'slurred_speech','knee_pain','hip_joint_pain','muscle_weakness','stiff_neck','swelling_joints',
    'movement_stiffness','spinning_movements','loss_of_balance','unsteadiness',
    'weakness_of_one_body_side','loss_of_smell','bladder_discomfort','foul_smell_of urine',
    'continuous_feel_of_urine','passage_of_gases','internal_itching','toxic_look_(typhos)',
    'depression','irritability','muscle_pain','altered_sensorium','red_spots_over_body','belly_pain',
    'abnormal_menstruation','dischromic _patches','watering_from_eyes','increased_appetite','polyuria','family_history','mucoid_sputum',
    'rusty_sputum','lack_of_concentration','visual_disturbances','receiving_blood_transfusion',
    'receiving_unsterile_injections','coma','stomach_bleeding','distention_of_abdomen',
    'history_of_alcohol_consumption','fluid_overload','blood_in_sputum','prominent_veins_on_calf',
    'palpitations','painful_walking','pus_filled_pimples','blackheads','scurring','skin_peeling',
    'silver_like_dusting','small_dents_in_nails','inflammatory_nails','blister','red_sore_around_nose',
    'yellow_crust_ooze']
    global disease
    disease=['Fungal infection','Allergy','GERD','Chronic cholestasis','Drug Reaction',
    'Peptic ulcer diseae','AIDS','Diabetes','Gastroenteritis','Bronchial Asthma','Hypertension',
    ' Migraine','Cervical spondylosis',
    'Paralysis (brain hemorrhage)','Jaundice','Malaria','Chicken pox','Dengue','Typhoid','hepatitis A',
    'Hepatitis B','Hepatitis C','Hepatitis D','Hepatitis E','Alcoholic hepatitis','Tuberculosis',
    'Common Cold','Pneumonia','Dimorphic hemmorhoids(piles)',
    'Heartattack','Varicoseveins','Hypothyroidism','Hyperthyroidism','Hypoglycemia','Osteoarthristis',
    'Arthritis','(vertigo) Paroymsal  Positional Vertigo','Acne','Urinary tract infection','Psoriasis',
    'Impetigo']
    l1=sorted(l)
    global l2
    l2=[]
    for x in range(0,len(l1)):
        l2.append(0)

    # TESTING DATA df -------------------------------------------------------------------------------------
    # try: # running using executable
    #     path = sys._MEIPASS

    # except: # running using .py sript
    #     path = os.path.abspath('.')

    # csv_path = os.path.join(path, 'Training.csv')
    df=pd.read_csv("Training.csv")


    df.replace({'prognosis':{'Fungal infection':0,'Allergy':1,'GERD':2,'Chronic cholestasis':3,'Drug Reaction':4,
    'Peptic ulcer diseae':5,'AIDS':6,'Diabetes ':7,'Gastroenteritis':8,'Bronchial Asthma':9,'Hypertension ':10,
    'Migraine':11,'Cervical spondylosis':12,
    'Paralysis (brain hemorrhage)':13,'Jaundice':14,'Malaria':15,'Chicken pox':16,'Dengue':17,'Typhoid':18,'hepatitis A':19,
    'Hepatitis B':20,'Hepatitis C':21,'Hepatitis D':22,'Hepatitis E':23,'Alcoholic hepatitis':24,'Tuberculosis':25,
    'Common Cold':26,'Pneumonia':27,'Dimorphic hemmorhoids(piles)':28,'Heart attack':29,'Varicose veins':30,'Hypothyroidism':31,
    'Hyperthyroidism':32,'Hypoglycemia':33,'Osteoarthristis':34,'Arthritis':35,
    '(vertigo) Paroymsal  Positional Vertigo':36,'Acne':37,'Urinary tract infection':38,'Psoriasis':39,
    'Impetigo':40}},inplace=True)

    # print(df.head())
    global X,y,X_test,y_test
    X= df[l1]

    y = df[["prognosis"]]
    np.ravel(y)
# print(y)

# TRAINING DATA tr --------------------------------------------------------------------------------
    tr=pd.read_csv(("Testing.csv"))
    tr.replace({'prognosis':{'Fungal infection':0,'Allergy':1,'GERD':2,'Chronic cholestasis':3,'Drug Reaction':4,
    'Peptic ulcer diseae':5,'AIDS':6,'Diabetes ':7,'Gastroenteritis':8,'Bronchial Asthma':9,'Hypertension ':10,
    'Migraine':11,'Cervical spondylosis':12,
    'Paralysis (brain hemorrhage)':13,'Jaundice':14,'Malaria':15,'Chicken pox':16,'Dengue':17,'Typhoid':18,'hepatitis A':19,
    'Hepatitis B':20,'Hepatitis C':21,'Hepatitis D':22,'Hepatitis E':23,'Alcoholic hepatitis':24,'Tuberculosis':25,
    'Common Cold':26,'Pneumonia':27,'Dimorphic hemmorhoids(piles)':28,'Heart attack':29,'Varicose veins':30,'Hypothyroidism':31,
    'Hyperthyroidism':32,'Hypoglycemia':33,'Osteoarthristis':34,'Arthritis':35,
    '(vertigo) Paroymsal  Positional Vertigo':36,'Acne':37,'Urinary tract infection':38,'Psoriasis':39,
    'Impetigo':40}},inplace=True)

    X_test= tr[l1]
    y_test = tr[["prognosis"]]
    np.ravel(y_test)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(815, 637)
        MainWindow.setMinimumSize(QtCore.QSize(815, 637))
        MainWindow.setMaximumSize(QtCore.QSize(815, 637))
        MainWindow.setSizeIncrement(QtCore.QSize(772, 637))
        MainWindow.setStyleSheet("\n"
"background-color:#f6f2eb;")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(197, 284, 431, 41))
        self.label.setStyleSheet("background:none;\n"
"color:white;\n"
"font-size:20px;")
        self.label.setObjectName("label")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(111, 391, 181, 22))
        self.comboBox.setStyleSheet("\n"
"background:none;\n"
"")
        self.comboBox.setObjectName("comboBox")
        self.comboBox_2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_2.setGeometry(QtCore.QRect(327, 391, 181, 22))
        self.comboBox_2.setStyleSheet("background:none;\n"
"")
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_3 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_3.setGeometry(QtCore.QRect(447, 481, 181, 22))
        self.comboBox_3.setStyleSheet("background:none;\n"
"")
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_4 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_4.setGeometry(QtCore.QRect(219, 481, 181, 22))
        self.comboBox_4.setStyleSheet("background:none;\n"
"")
        self.comboBox_4.setObjectName("comboBox_4")
        self.comboBox_5 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_5.setGeometry(QtCore.QRect(542, 391, 181, 22))
        self.comboBox_5.setStyleSheet("background:none;\n"
"")
        self.comboBox_5.setObjectName("comboBox_5")
        self.next = QtWidgets.QPushButton(self.centralwidget)
        self.next.setGeometry(QtCore.QRect(340, 560, 131, 31))
        self.next.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 #ed5d58, stop:1 #ed5d58);\n"
"color: rgb(255, 255, 255);\n"
"border:none;\n"
"border-radius:5px;")
        self.next.setObjectName("next")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(114, 361, 81, 31))
        self.label_2.setStyleSheet("color:#0d0567;\n"
"background:none;\n"
"")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(546, 363, 71, 31))
        self.label_3.setStyleSheet("color:#0d0567;\n"
"background:none;\n"
"")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(330, 363, 71, 31))
        self.label_4.setStyleSheet("color:#0d0567;\n"
"background:none;\n"
"")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(450, 452, 71, 31))
        self.label_5.setStyleSheet("color:#0d0567;\n"
"background:none;\n"
"")
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(222, 452, 74, 31))
        self.label_6.setStyleSheet("color:#0d0567;\n"
"background:none;\n"
"")
        self.label_6.setObjectName("label_6")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(187, 31, 411, 251))
        self.label_8.setStyleSheet("background:none;")
        self.label_8.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.label_8.setText("")
        self.label_8.setPixmap(QtGui.QPixmap("src/AI-Symptom-2-1024x595.png"))
        self.label_8.setScaledContents(True)
        self.label_8.setObjectName("label_8")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(65, 333, 691, 221))
        self.label_7.setStyleSheet("background-color:#f3cdc6;\n"
" border-radius: 5px ;")
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(147, 281, 501, 51))
        self.label_9.setStyleSheet("background-color:#012c6b;\n"
" border-radius: 5px ;")
        self.label_9.setText("")
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(90, 391, 21, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(63)
        sizePolicy.setHeightForWidth(self.label_10.sizePolicy().hasHeightForWidth())
        self.label_10.setSizePolicy(sizePolicy)
        self.label_10.setMinimumSize(QtCore.QSize(0, 0))
        self.label_10.setStyleSheet("background-color:none;")
        self.label_10.setText("")
        self.label_10.setPixmap(QtGui.QPixmap("src/checkbox (1).png"))
        self.label_10.setScaledContents(True)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(306, 391, 21, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(63)
        sizePolicy.setHeightForWidth(self.label_11.sizePolicy().hasHeightForWidth())
        self.label_11.setSizePolicy(sizePolicy)
        self.label_11.setMinimumSize(QtCore.QSize(0, 0))
        self.label_11.setStyleSheet("background-color:none;")
        self.label_11.setText("")
        self.label_11.setPixmap(QtGui.QPixmap("src/checkbox (1).png"))
        self.label_11.setScaledContents(True)
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(521, 391, 21, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(63)
        sizePolicy.setHeightForWidth(self.label_12.sizePolicy().hasHeightForWidth())
        self.label_12.setSizePolicy(sizePolicy)
        self.label_12.setMinimumSize(QtCore.QSize(0, 0))
        self.label_12.setStyleSheet("background-color:none;")
        self.label_12.setText("")
        self.label_12.setPixmap(QtGui.QPixmap("src/checkbox (1).png"))
        self.label_12.setScaledContents(True)
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(197, 480, 21, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(63)
        sizePolicy.setHeightForWidth(self.label_13.sizePolicy().hasHeightForWidth())
        self.label_13.setSizePolicy(sizePolicy)
        self.label_13.setMinimumSize(QtCore.QSize(0, 0))
        self.label_13.setStyleSheet("background-color:none;")
        self.label_13.setText("")
        self.label_13.setPixmap(QtGui.QPixmap("src/checkbox (1).png"))
        self.label_13.setScaledContents(True)
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(426, 481, 21, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(63)
        sizePolicy.setHeightForWidth(self.label_14.sizePolicy().hasHeightForWidth())
        self.label_14.setSizePolicy(sizePolicy)
        self.label_14.setMinimumSize(QtCore.QSize(0, 0))
        self.label_14.setStyleSheet("background-color:none;")
        self.label_14.setText("")
        self.label_14.setPixmap(QtGui.QPixmap("src/checkbox (1).png"))
        self.label_14.setScaledContents(True)
        self.label_14.setObjectName("label_14")
        self.label_9.raise_()
        self.label_7.raise_()
        self.label.raise_()
        self.comboBox.raise_()
        self.comboBox_2.raise_()
        self.comboBox_3.raise_()
        self.comboBox_4.raise_()
        self.comboBox_5.raise_()
        self.comboBox.addItems(["Choose Symptom 1", *l1])
        self.comboBox_2.addItems(["Choose Symptom 2", *l1])
        self.comboBox_3.addItems(["Choose Symptom 3", *l1])
        self.comboBox_4.addItems(["Choose Symptom 4", *l1])
        self.comboBox_5.addItems(["Choose Symptom 5", *l1])
        self.next.raise_()
        self.label_2.raise_()
        self.label_3.raise_()
        self.label_4.raise_()
        self.label_5.raise_()
        self.label_6.raise_()
        self.label_8.raise_()
        self.label_10.raise_()
        self.label_11.raise_()
        self.label_12.raise_()
        self.label_13.raise_()
        self.label_14.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.next.clicked.connect(self.nxt)

    def nxt(self):
        self.comboBox = str(self.comboBox.currentText())
        self.comboBox_2 = str(self.comboBox_2.currentText())
        self.comboBox_3 = str(self.comboBox_3.currentText())
        self.comboBox_4 = str(self.comboBox_4.currentText())
        self.comboBox_5 = str(self.comboBox_5.currentText())

        self.window_2 = QtWidgets.QMainWindow()
        self.window_ui_2 = Ui_MainWindow_3()
        self.window_ui_2.setupUi(self.window_2)
        self.window_2.show()
        # ========================================
        global clf3
        clf3 = clf3.fit(X,y)

        psymptoms = [self.comboBox,self.comboBox_2,self.comboBox_3,self.comboBox_4,self.comboBox_5]
        for k in range(0,len(l1)):
            for z in psymptoms:
                if(z==l1[k]):
                    l2[k]=1

        inputtest = [l2]
        predict = clf3.predict(inputtest)
        predicted=predict[0]

        d='no'
        for a in range(0,len(disease)):
            if(predicted == a):
                d='yes'
                break      
        if (d=='yes'):
            self.dstree=disease[a]
            dis.append(self.dstree)

        else:
            print("Not Found")
        # ----------------------------------------------

        global clf4
        clf4 = clf4.fit(X,np.ravel(y))
        for k in range(0,len(l1)):
            for z in psymptoms:
                if(z==l1[k]):
                    l2[k]=1

        inputtest = [l2]
        predict = clf4.predict(inputtest)
        predicted=predict[0]

        R='no'
        for a in range(0,len(disease)):
            if(predicted == a):
                R='yes'
                break

        
        if (R=='yes'):
            self.randomF=disease[a]
            dis.append(self.randomF)
        # ======================================================
        global gnb
        gnb=gnb.fit(X,np.ravel(y))
        for k in range(0,len(l1)):
            for z in psymptoms:
                if(z==l1[k]):
                    l2[k]=1

        inputtest = [l2]
        predict = gnb.predict(inputtest)
        predicted=predict[0]

        N='no'
        for a in range(0,len(disease)):
            if(predicted == a):
                N='yes'
                break

        
        if (N=='yes'):
            self.NaiveB=disease[a]
            dis.append(self.NaiveB)
        else:
            print("Not Found")
# ------------------------------------------------------------------------
        self.window_ui_2.lineEdit.setText(self.dstree)
        self.window_ui_2.lineEdit_2.setText(self.NaiveB)
        self.window_ui_2.lineEdit_3.setText(self.randomF)
        QtWidgets.qApp.processEvents()
        readn("These are machine based generated result for further confirmation please consult Your Doctor and click on next")
        self.window_ui_2.pushButton.clicked.connect(self.nxt2)
    
    def nxt2(self):
        # print(dis)
        try:
                self.most_common = max(dis, key = dis.count)
        except:
                self.most_common = self.randomF
        self.window_2 = QtWidgets.QMainWindow()
        self.window_ui_2 = Ui_MainWindow_4()
        self.window_ui_2.setupUi(self.window_2)
        self.window_2.show()
        self.window_ui_2.lineEdit.setText(self.most_common)
        table = pd.read_csv(("symptom_Description.csv"))
        df = pd.DataFrame(table)
        self.p=df.loc[df["Disease"]==self.most_common, 'Description'].values[0]
        pd.set_option('display.max_colwidth', None)
        self.window_ui_2.plainTextEdit_2.insertPlainText(self.p)

        table_2 = pd.read_csv("symptom_precaution.csv")
        df_2 = pd.DataFrame(table_2)
        self.p1=df_2.loc[df_2['Disease']==self.most_common, "p1"].values[0]
        self.p2=df_2.loc[df_2['Disease']==self.most_common, "p2"].values[0]
        self.p3=df_2.loc[df_2['Disease']==self.most_common, "p3"].values[0]
        self.p4=df_2.loc[df_2['Disease']==self.most_common, "p4"].values[0]
        self.window_ui_2.plainTextEdit.insertPlainText(self.p1)
        self.window_ui_2.plainTextEdit_4.insertPlainText(self.p2)
        self.window_ui_2.plainTextEdit_3.insertPlainText(self.p3)
        self.window_ui_2.plainTextEdit_5.insertPlainText(self.p4)

        QtWidgets.qApp.processEvents()
        readn("You Might be suffering from"+ str(self.most_common) )
        readn("Click on read Button if you want me to read the precautions and description of your disease")
        self.window_ui_2.read.clicked.connect(self.readc)
        # readn(self.p.to_string()[1:])
    def readc(self):
        QtWidgets.qApp.processEvents()
        readn(self.p)
        readn("Following are the precaution you must take ")
        readn(self.p1)
        readn(self.p2)
        readn(self.p3)
        readn(self.p4)


            

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Select the Symptoms which you are suffering"))
        self.next.setText(_translate("MainWindow", "Next"))
        self.label_2.setText(_translate("MainWindow", "Symptom 1 "))
        self.label_3.setText(_translate("MainWindow", "Symptom 5"))
        self.label_4.setText(_translate("MainWindow", "Symptom 2"))
        self.label_5.setText(_translate("MainWindow", "Symptom 3"))
        self.label_6.setText(_translate("MainWindow", "Symptom 4"))
import src


def readn(nstr):
        speak=Dispatch(("SAPI.SpVoice"))
        speak.Speak(nstr)
    

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow_2()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
